# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app"s APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true
# Parallel builds can significantly improve build times;
# how much depends on your project structure and how many dependencies you have between subprojects.
# A build whose execution time is dominated by a single subproject won?t benefit much at all.
# Niether will a project with lots of inter-subproject dependencies.
# But most multi-subproject builds see a reduction in build times.
org.gradle.parallel=true

# The Gradle Daemon reduces build times by:
#caching project information across builds
#running in the background so every Gradle build doesn?t have to wait for JVM startup
#benefiting from continuous runtime optimization in the JVM
#watching the file system to calculate exactly what needs to be rebuilt before you run a build
#Gradle enables the Daemon by default, but some builds override this preference.
# If your build disables the Daemon, you could see a significant performance improvement from enabling the daeomon.
# To enable the Daemon by default in older Gradle versions, add the following setting to the gradle.properties file
# in the project root or your Gradle home:
org.gradle.daemon=true
# The build cache is a Gradle optimization that stores task outputs for specific input.
# When you later run that same task with the same input,
# Gradle retrieves the output from the build cache instead of running the task again.
# By default, Gradle does not use the build cache.
# To enable the build cache by default, add the following setting to the gradle.properties file
# in the project root or your Gradle home:
org.gradle.caching=true

org.gradle.configureondemand=true
